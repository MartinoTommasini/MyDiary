
# This file was *autogenerated* from the file ./find_linear_independent.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_5 = Integer(5); _sage_const_29 = Integer(29); _sage_const_13 = Integer(13); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_23 = Integer(23); _sage_const_30 = Integer(30); _sage_const_19 = Integer(19); _sage_const_1608584 = Integer(1608584)#! /usr/bin/env sage

import sys, requests, re, hashlib
from sage.all import *
from collections import OrderedDict

hashlen = _sage_const_5 

url, auth = 'http://131.155.21.174:8081', ('', 'ilovecrypto')
sid, token = _sage_const_1608584 , '9c593b9cff2bb86750728edca1d4e203b20ee451'

sha = lambda m: int(hashlib.sha256((str(sid) + m).encode()).hexdigest()[:_sage_const_2 *hashlen],_sage_const_16 )

req = requests.Session()
req.cookies['token'] = token

r = req.get(url+'/', auth=auth)
n = int(re.search('n = ([0-9]+)', r.text).groups()[_sage_const_0 ])
e = int(re.search('e = ([0-9]+)', r.text).groups()[_sage_const_0 ])


def sign(m):
    r = req.post(url+'/sign', auth=auth, data={'msg': m})
    return int(r.text)

def validate(m, s):
    return pow(s, e, n) == sha(m)

def forgery(m, s):  # use this to submit your forgery once you've created it
    assert validate(m, s)
    r = req.post(url+'/validate_forgery', auth=auth, data={'msg': m, 'sig': str(s)})
    print('\x1b[32m{}\x1b[0m'.format(r.text.strip()))

################################################################

# find linear independent vectors

factor_base=_sage_const_30 
num_primes = _sage_const_10  # number of primes in the factor base

primes = [_sage_const_2 ,_sage_const_3 ,_sage_const_5 ,_sage_const_7 ,_sage_const_11 ,_sage_const_13 ,_sage_const_17 ,_sage_const_19 ,_sage_const_23 ,_sage_const_29 ]

messages = [ 
        'wolOymtxcWggn',
        'ZxwlfbFIXneow',
        'zzlLWRpoWyWzn',
        'ZtKCYOROzJjrN',
        'iAQuGaIolTihB',
        'CPJaXVIYAQaqb',
        'aDgfOqOsSKHmG',
        'SlUgldVmvDwDm',
        'TgxMATysVJSMn',
        'NUtIMkOtgKnLs',
        'twIipROLHkJWL'
        ]
"""
        'hkaHtMUuRCklI',
        'FioPBpAiMOBaE',
        'MFkefLqTIDGAF',
        'gIcCIYINqmdjz',
        'HbLYSknniMSrr',
        'YvNsAIgsDzOZK',
        'IOFEsKjPQwJpI'
"""

# set the matrix with 0 values
M = matrix(GF(e),_sage_const_11 ,_sage_const_10 )

index=_sage_const_0 
for message in messages:
    hashed = sha(message)
    factors = OrderedDict(factor(hashed))

    vector = []
    for p in primes:
        if p in factors:
            vector.append(factors[p])
        else:
            vector.append(_sage_const_0 )
    M[index] = vector
    index += _sage_const_1 

print(M)
print("-"*_sage_const_10 )
print(M.echelon_form())

